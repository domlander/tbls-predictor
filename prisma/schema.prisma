// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id") @db.VarChar(255)
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type") @db.VarChar(255)
  providerId         String    @map("provider_id") @db.VarChar(255)
  providerAccountId  String    @map("provider_account_id") @db.VarChar(255)
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires") @db.Timestamptz(6)
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([providerAccountId], name: "provider_account_id")
  @@index([providerId], name: "provider_id")
  @@index([userId], name: "user_id")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @unique @map("session_token") @db.VarChar(255)
  accessToken  String   @unique @map("access_token") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("verification_requests")
}

model User {
  id                 Int          @id @default(autoincrement())
  username           String?      @map("name") @db.VarChar(255)
  email              String?      @unique @db.VarChar(255)
  emailVerified      DateTime?    @map("email_verified") @db.Timestamptz(6)
  image              String?
  createdAt          DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime     @default(now()) @map("updated_at") @db.Timestamptz(6)
  predictions        Prediction[]
  leagues            League[]
  leagueApplications Applicant[]

  @@map("users")
}

model League {
  id              Int          @id @default(autoincrement())
  name            String       @db.VarChar(255)
  status          LeagueStatus
  administratorId Int          @map("administrator_id")
  season          String       @db.VarChar(255)
  gameweekStart   Int          @default(1) @map("gameweek_start") @db.SmallInt
  gameweekEnd     Int          @default(17) @map("gameweek_end") @db.SmallInt
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  users           User[]
  applicants      Applicant[]

  @@map("leagues")
}

model Applicant {
  user      User                  @relation(fields: [userId], references: [id])
  userId    Int
  league    League                @relation(fields: [leagueId], references: [id])
  leagueId  Int
  status    LeagueApplicantStatus
  createdAt DateTime              @default(now())

  @@id([userId, leagueId])
  @@map("UsersOnLeagues")
}

model Fixture {
  id          Int          @id @default(autoincrement())
  gameweek    Int          @db.SmallInt
  kickoff     DateTime
  homeTeam    String       @map("home_team") @db.VarChar(255)
  awayTeam    String       @map("away_team") @db.VarChar(255)
  homeGoals   Int?         @map("home_goals") @db.SmallInt
  awayGoals   Int?         @map("away_goals") @db.SmallInt
  predictions Prediction[]

  @@map("fixtures")
}

model Prediction {
  fixtureId     Int     @map("fixture_id")
  userId        Int     @map("user_id")
  homeGoals     Int?    @map("home_goals") @db.SmallInt
  awayGoals     Int?    @map("away_goals") @db.SmallInt
  score         Int?    @db.SmallInt
  big_boy_bonus Boolean
  fixture       Fixture @relation(fields: [fixtureId], references: [id])
  user          User    @relation(fields: [userId], references: [id])

  @@id([fixtureId, userId])
  @@map("predictions")
}

enum LeagueApplicantStatus {
  applied
  accepted
  rejected

  @@map("league_applicant_status")
}

enum LeagueStatus {
  open
  started
  completed

  @@map("league_status")
}
