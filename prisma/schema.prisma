generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                  String      @id @default(cuid())
  username            String?     @map("name")
  email               String?     @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  leagueApplications  Applicant[]
  predictions         Prediction[]
  predictionLogs      PredictionLog[]
  leagues             League[]
}

model League {
  id              Int          @id @default(autoincrement())
  name            String       @db.VarChar(255)
  status          LeagueStatus
  administratorId String       @db.VarChar(255) @map("administrator_id")
  season          String       @db.VarChar(255)
  gameweekStart   Int          @default(1) @map("gameweek_start") @db.SmallInt
  gameweekEnd     Int          @default(17) @map("gameweek_end") @db.SmallInt
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  applicants      Applicant[]
  users           User[]

  @@map("leagues")
}

model Applicant {
  userId    String
  leagueId  Int
  createdAt DateTime              @default(now())
  status    LeagueApplicantStatus
  league    League                @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, leagueId])
  @@map("UsersOnLeagues")
}

model Fixture {
  id              Int          @id @default(autoincrement())
  gameweek        Int          @db.SmallInt
  homeTeam        String       @map("home_team") @db.VarChar(255)
  awayTeam        String       @map("away_team") @db.VarChar(255)
  homeGoals       Int?         @map("home_goals") @db.SmallInt
  awayGoals       Int?         @map("away_goals") @db.SmallInt
  kickoff         DateTime     @db.Timestamptz(6)
  predictions     Prediction[]
  predictionLogs  PredictionLog[]

  @@map("fixtures")
}

model Prediction {
  fixtureId   Int     @map("fixture_id")
  userId      String  @map("user_id")
  homeGoals   Int?    @map("home_goals") @db.SmallInt
  awayGoals   Int?    @map("away_goals") @db.SmallInt
  bigBoyBonus Boolean @map("big_boy_bonus")
  score       Int?    @db.SmallInt
  fixture     Fixture @relation(fields: [fixtureId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([fixtureId, userId])
  @@map("predictions")
}

model PredictionLog {
  id               Int       @id @default(autoincrement())
  userId           String
  fixtureId        Int
  oldHomeGoals     Int?      @db.SmallInt
  newHomeGoals     Int?      @db.SmallInt
  oldAwayGoals     Int?      @db.SmallInt
  newAwayGoals     Int?      @db.SmallInt
  oldBigBoyBonus   Boolean?
  newBigBoyBonus   Boolean?
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  fixture          Fixture   @relation(fields: [fixtureId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("prediction_log")
}

enum LeagueApplicantStatus {
  applied
  accepted
  rejected

  @@map("league_applicant_status")
}

enum LeagueStatus {
  open
  started
  completed

  @@map("league_status")
}
